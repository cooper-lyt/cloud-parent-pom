# user  www www;
# worker_processes  4;

#error_log  logs/error.log  error;
error_log  logs/error.log  debug;

pid        logs/nginx.pid;


env MOCKEAGAIN_VERBOSE;
env MOCKEAGAIN_WRITE_TIMEOUT_PATTERN;
env LD_PRELOAD;
env DYLD_INSERT_LIBRARIES;

env API_SERVER;

worker_rlimit_nofile 65535;
events {
    worker_connections  65535;
}


http {
    include       mime.types;
    default_type  application/octet-stream;
    #    default_type text/plain;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;

	
	server_names_hash_bucket_size 128;
    client_header_buffer_size 32k;
    large_client_header_buffers 4 32k;
    client_max_body_size 8m;
 
	keepalive_timeout 0;
	
    sendfile        on;
    tcp_nopush     on;
    tcp_nodelay on;

	fastcgi_connect_timeout 300;
    fastcgi_send_timeout 300;
    fastcgi_read_timeout 300;
    fastcgi_buffer_size 64k;
    fastcgi_buffers 4 64k;
    fastcgi_busy_buffers_size 128k;
    fastcgi_temp_file_write_size 128k;
	
	
    ##cache##
    proxy_connect_timeout 5;
    proxy_read_timeout 60;
    proxy_send_timeout 5;
    proxy_buffer_size 16k;
    proxy_buffers 4 64k;
    proxy_busy_buffers_size 128k;
    proxy_temp_file_write_size 128k;
    proxy_temp_path temp_dir;
    proxy_cache_path cache levels=1:2 keys_zone=cache_one:200m inactive=1d max_size=30g;
    ##end##
	
	
    open_file_cache max=1000 inactive=20s;
    open_file_cache_min_uses 5;
    open_file_cache_valid 30s;

    gzip on;
    gzip_min_length  1k;
    gzip_buffers     4 16k;
    gzip_http_version 1.1;
    gzip_comp_level 2;
    gzip_types       text/plain application/x-javascript text/css application/xml;
	gzip_disable "MSIE [1-6]\.";
    gzip_vary on;

    #keepalive_timeout  65;
	#problematic
    #lua_code_cache off;
    lua_package_path '/var/www/media-server/resty/lua/?.lua;/blah/?.lua;/usr/local/openresty/lualib/?.lua;/usr/local/openresty/site/lualib/?.lua';
    resolver 8.8.8.8;
    # 对于开发研究，可以对代码 cache 进行关闭，这样不必每次都重新加载 nginx。
    lua_code_cache off;


    server {
        listen       6699;
        server_name  localhost;

        rewrite_log on;

        charset utf-8,gbk;

        #access_log  logs/host.access.log  main;

        #note:must end with“/”
        set $weed_audio_root_url "http://127.0.0.1:9333/";
        set $weed_img_root_url "http://127.0.0.1:9333/";
        set $local_img_fs_root "/var/www/weedfs/";
        set $local_audio_fs_root "/var/www/weedfs/";

        set_by_lua $api_server 'return os.getenv("API_SERVER")';

        location ~ ^/archives/upload/{
           default_type application/json;
           add_header 'Access-Control-Allow-Origin' '*';
           add_header 'Access-Control-Allow-Credentials' 'true';
           add_header 'Access-Control-Allow-Methods' 'GET, HEAD, POST, PUT, PATCH, DELETE, OPTIONS';
           add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization';
           rewrite  "/archives/upload/(.*)" /archives/_upload?item=$1 last;
        }

        location ~ ^/archives/_upload{
            internal;
            content_by_lua_file lua/api/archives.lua;
        }

        location / {
            default_type text/html;

            content_by_lua_block {
                ngx.say("Media Server is Running.")
            }
        }

        location = /weedfs/_put {
            internal;
            set_by_lua $weedfs_url 'return ngx.unescape_uri(ngx.var.arg_url)';
            set_by_lua $weedfs_fid 'return ngx.unescape_uri(ngx.var.arg_fid)';
            #echo 'http://$weedfs_url/$arg_fid';    
            proxy_pass http://$weedfs_url/$weedfs_fid;
        }

        location = /weedfs/_delete {
            internal;
            set_by_lua $weedfs_fid 'return ngx.unescape_uri(ngx.var.arg_fid)';
            proxy_pass http://$weed_img_root_url/$weedfs_fid;
        }

        location ~ ^/delete/ {
           default_type application/json;
           add_header 'Access-Control-Allow-Origin' '*';
           add_header 'Access-Control-Allow-Credentials' 'true';
           add_header 'Access-Control-Allow-Methods' 'GET, HEAD, POST, PUT, PATCH, DELETE, OPTIONS';
           add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization';
           content_by_lua_block {


           }

        }

        location ~ ^/upload/{
            default_type application/json;
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, HEAD, POST, PUT, PATCH, DELETE, OPTIONS'; 
            add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization';

            content_by_lua_block {
                local headers_tab = ngx.req.get_headers()
                     ngx.log(ngx.DEBUG,"==upload====")
                for k, v in pairs(headers_tab) do
                    ngx.log(ngx.DEBUG,k..":"..v)
                end

                local weedfs = require "weedfs"
                local cjson = require "cjson"

                local code , body = weedfs:upload()

                ngx.say(cjson.encode(body))

                ngx.exit(code)
            }
        }

        #sample:/_img/?size=orig&volumn=1&id=1234
        location /_img/{
            default_type  image/jpeg;
            if ($request_method = 'DELETE' ) {
                return 405;
            }
            if ($request_method = 'PUT' ) {
                return 405;
            }
            if ($request_method = 'POST' ) {
                return 405;
            }

            content_by_lua_file lua/media.lua;
            expires      30d;
#            access_log off;
        }

        location /_pdf/{
            default_type application/pdf;
            if ($request_method = 'DELETE' ) {
                return 405;
            }
            if ($request_method = 'PUT' ) {
                return 405;
            }
            if ($request_method = 'POST' ) {
                return 405;
            }
            content_by_lua_file lua/media.lua;
            expires      30d;
        }

        location /pdf/{
            rewrite  "/pdf/([0-9]+)[,/]([a-z0-9]+)(\.[a-z]+)?" /_pdf/?type=pdf&size=orig&volumn=$1&id=$2 last;
            expires 30d;
        }

        location /_file/{

             if ($request_method = 'DELETE' ) {
                 return 405;
             }
             if ($request_method = 'PUT' ) {
                 return 405;
             }
             if ($request_method = 'POST' ) {
                 return 405;
             }
             content_by_lua_file lua/media.lua;
             expires      30d;
        }

        location /file/{
            rewrite  "/file/([0-9]+)[,/]([a-z0-9]+)(\.[a-z]+)?" /_file/?type=file&size=orig&volumn=$1&id=$2 last;
            expires 30d;
        }
		
        location  /img/{

            rewrite  "/img/([0-9]+x[0-9]+s?)/([0-9]+)/([a-z0-9]+)(\.[a-z]+)?" /_img/?type=img&size=$1&volumn=$2&id=$3 last;
            rewrite  "/img/([0-9]+x[0-9]+s?)/([0-9]+),([a-z0-9]+)(\.[a-z]+)?" /_img/?type=img&size=$1&volumn=$2&id=$3 last;
            rewrite  "/img/orig/([0-9]+)[,/]([a-z0-9]+)(\.[a-z]+)?" /_img/?type=img&size=orig&volumn=$1&id=$2 last;
            expires 30d;
            #            access_log off;
        }

        location /jpg/{
            default_type image/jpg;
             rewrite  "/jpg/([0-9]+x[0-9]+s?)/([0-9]+)/([a-z0-9]+)(\.[a-z]+)?" /_img/?type=img&size=$1&volumn=$2&id=$3 last;
             rewrite  "/jpg/([0-9]+x[0-9]+s?)/([0-9]+),([a-z0-9]+)(\.[a-z]+)?" /_img/?type=img&size=$1&volumn=$2&id=$3 last;
             rewrite  "/jpg/orig/([0-9]+)[,/]([a-z0-9]+)(\.[a-z]+)?" /_img/?type=img&size=orig&volumn=$1&id=$2 last;
             expires 30d;
        }

        location /_audio/{
            default_type  audio/mp3;
            if ($request_method = 'DELETE' ) {
                return 405;
            }
            if ($request_method = 'PUT' ) {
                return 405;
            }
            if ($request_method = 'POST' ) {
                return 405;
            }

            content_by_lua_file lua/media.lua;
            expires      30d;
            #            access_log off;
        }

        location /audio/{
            rewrite  "/audio/(mp3)/([0-9]+)/([a-z0-9]+)(\.[a-z]+)?" /_audio/?type=audio&size=$1&volumn=$2&id=$3 last;
            rewrite  "/audio/(mp3)/([0-9]+),([a-z0-9]+)(\.[a-z]+)?" /_audio/?type=audio&size=$1&volumn=$2&id=$3 last;
            rewrite  "/audio/orig/([0-9]+),([a-z0-9]+)(\.[a-z]+)?" /_audio/?type=audio&size=orig&volumn=$1&id=$2 last;
            expires      30d;
        }

        location ~ /\.ht {
            deny  all;
        }


        location /status  {
            stub_status on;
            access_log   off;
        }


    }
}


